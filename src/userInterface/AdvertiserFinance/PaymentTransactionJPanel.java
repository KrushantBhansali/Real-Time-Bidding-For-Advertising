/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.AdvertiserFinance;

import business.EcoSystem;
import business.Organization.AdvertiserFinance;
import business.Organization.Organization;
import business.WorkQueue.GenerateInvoice;
import business.WorkQueue.MakePayment;
import business.WorkQueue.WorkRequest;
import business.enterprise.Advertiser;
import business.enterprise.Enterprise;
import business.userAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Krush
 */
public class PaymentTransactionJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PaymentTransactionJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private AdvertiserFinance organization;
    private Advertiser enterprise;
    private EcoSystem system;

    public PaymentTransactionJPanel(JPanel userProcessContainer, UserAccount userAccount, AdvertiserFinance organization, Advertiser enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.organization = organization;
        this.enterprise = enterprise;
        this.system = system;

        populateTable();
    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) payjTable1.getModel();
        dtm.setRowCount(0);

        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request instanceof MakePayment) {
                MakePayment payment = (MakePayment) request;
                Object row[] = new Object[3];
                row[0] = payment;
                row[1] = payment.getAmountDue();
                row[2] = payment.getStatus();
                dtm.addRow(row);

            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        payjTable1 = new javax.swing.JTable();
        paymentjButton1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        payjTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sender", "Amount", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(payjTable1);

        paymentjButton1.setText("Make Payment");
        paymentjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentjButton1ActionPerformed(evt);
            }
        });

        jButton1.setText("<< Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(paymentjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(107, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(paymentjButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(71, 71, 71))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void paymentjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentjButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = payjTable1.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a Row");
        }

        MakePayment payment = (MakePayment) payjTable1.getValueAt(selectedRow, 0);

        if (payment.getAmountDue() > enterprise.getBudget().getRemBudget()) {
            JOptionPane.showMessageDialog(null, "Insufficient Funds, Please Allocate a new Budget");
            return;
        } else {
            int amnt = enterprise.getBudget().getRemBudget() - payment.getAmountDue();
            //enterprise.getBudget().setAvailBudget(amnt);
            enterprise.getBudget().setRemBudget(amnt);
            payment.setStatus("Amount Paid");
        }

        if (payment.getStatus() != null) {
            payment.getGenInv().setStatus("Payment Received");
        }
              //  request.setApproval("Payment Received");

        populateTable();
    }//GEN-LAST:event_paymentjButton1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
           userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable payjTable1;
    private javax.swing.JButton paymentjButton1;
    // End of variables declaration//GEN-END:variables
}
